<?php

namespace Drupal\diagnose\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Database\Database;
use Drupal\Core\Url;

class DiagnoseForm extends FormBase {

	// uniqueなIDを振る
	public function getFormId() {
		return 'diagnose_form';
	}
	private function getXmlInfo($basename) {
		$absolute_path = \Drupal::service('file_system')->realpath("public://" . $name);
        return simplexml_load_file($absolute_path);
	}

	// Formの中身を返す
	public function buildForm(array $form, FormStateInterface $form_state, $type = NULL, $name = NULL) {
		$absolute_path = \Drupal::service('file_system')->realpath("public://" . $name);
        $xml = simplexml_load_file($absolute_path);
		$xmloptions = explode(",", $xml->options);
		// 選択肢
		$options = [];
		for ($i = 0; $i < count($xmloptions); $i++) {
			$options[$i+1] = $xmloptions[$i];
		}
		$question = $xml->questions->question;

		$form['number_wrapper'] = [
		   '#type' => 'details',
		   '#title' => $xml->title,
		   '#collapsible' => FALSE,
		   '#collapsed' => FALSE,
		];
		for ($i = 1; $i <= count($question); $i++) {
		   $form['q'.$i] = [
		      "#type" => "radios",
			  "#title" => $question[$i-1]->title,
		   	  "#options" => $options,
			  "#required" => TRUE,
		   ];
		}
		$form["submit"] = [
		    "#type" => "submit",
			"#value" => "診断",
		];
		return $form;
	}

	// 内容のチェックは不要．必須項目のチェックはデフォルトでされる．
	public function validateForm(array &$form,
		   					     FormStateInterface $form_state) {
	}

	// ポチした時の処理
	public function submitForm(array &$form, FormStateInterface $form_state) {
		// 引数の取得
		$args = $form_state->getBuildInfo()["args"];
		$type = $args[0];

		// XMLの取得
		$name = $args[1];
		$absolute_path = \Drupal::service('file_system')->realpath("public://" . $name);
        $xml = simplexml_load_file($absolute_path);

		// 評価軸の初期化
		$classes = explode(",", $xml->classes);
		$point = [];
		foreach ($classes as $c) {
			$point[$c] = 0;
		}

		// セッション変数の取得
		$store = \Drupal::service('tempstore.private')->get('diagnosis');

		// 点数集計
		$question = $xml->questions->question;
		$total = 0;
	    for ($i = 1; $i <= count($question); $i++) {
			$class = strval(strval($question[$i-1]->class));
			$point[$class] += $form_state->getValue("q".$i);
			$total += $point[$class];
		}
		$store->set('total', $total);
		$store->set('point', $point);
		$store->set('classes', $classes);

		// 全体評価
		$ave = $xml->diagnosis->average;
		if ($total >= $ave->total + $ave->sd) {
			$store->set("message", strval($xml->diagnosis->high));
		}
		else if ($total <= $ave->total - $ave->sd) {
			$store->set("message", strval($xml->diagnosis->low));
		}
		else {
			$store->set("message", strval($xml->diagnosis->middle));
		}

		// 統計データ
		$store->set("average", strval($ave->total));
		$store->set("sd", strval($ave->sd));
		$form_state->setRedirectUrl(Url::fromRoute("diagnose-result"));
		return;
	}
}
	
